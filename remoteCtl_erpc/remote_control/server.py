#
# Generated by erpcgen 1.10.0 on Sun May 28 04:53:38 2023.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for ControlService
class ControlServiceService(erpc.server.Service):
    def __init__(self, handler):
        super(ControlServiceService, self).__init__(interface.IControlService.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IControlService.REMOTECONTROLACTION_ID: self._handle_RemoteControlAction,
                interface.IControlService.REMOTETUNESPEED_ID: self._handle_RemoteTuneSpeed,
                interface.IControlService.REMOTESHOWSPEED_ID: self._handle_RemoteShowSpeed,
                interface.IControlService.REMOTESHOWPATTERN_ID: self._handle_RemoteShowPattern,
            }

    def _handle_RemoteControlAction(self, sequence, codec):
        # Read incoming parameters.
        mode = codec.read_uint8()
        value = codec.read_int32()
        factor = codec.read_double()

        # Invoke user implementation of remote function.
        self._handler.RemoteControlAction(mode, value, factor)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IControlService.SERVICE_ID,
            request=interface.IControlService.REMOTECONTROLACTION_ID,
            sequence=sequence))

    def _handle_RemoteTuneSpeed(self, sequence, codec):
        # Read incoming parameters.
        max = codec.read_double()
        min = codec.read_double()

        # Invoke user implementation of remote function.
        self._handler.RemoteTuneSpeed(max, min)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IControlService.SERVICE_ID,
            request=interface.IControlService.REMOTETUNESPEED_ID,
            sequence=sequence))

    def _handle_RemoteShowSpeed(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.RemoteShowSpeed()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IControlService.SERVICE_ID,
            request=interface.IControlService.REMOTESHOWSPEED_ID,
            sequence=sequence))

    def _handle_RemoteShowPattern(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.RemoteShowPattern()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IControlService.SERVICE_ID,
            request=interface.IControlService.REMOTESHOWPATTERN_ID,
            sequence=sequence))


