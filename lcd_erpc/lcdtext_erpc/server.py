# You can write copyrights rules here. These rules will be copied into the outputs.

#
# Generated by erpcgen 1.10.0 on Sat Apr 29 20:18:22 2023.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for LCDService
class LCDServiceService(erpc.server.Service):
    def __init__(self, handler):
        super(LCDServiceService, self).__init__(interface.ILCDService.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.ILCDService.LOC_ID: self._handle_loc,
                interface.ILCDService.CLS_ID: self._handle_cls,
                interface.ILCDService.ROW_ID: self._handle_row,
                interface.ILCDService.COL_ID: self._handle_col,
                interface.ILCDService.PUT_ID: self._handle_put,
            }

    def _handle_loc(self, sequence, codec):
        # Read incoming parameters.
        column = codec.read_int32()
        row = codec.read_int32()

        # Invoke user implementation of remote function.
        self._handler.loc(column, row)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ILCDService.SERVICE_ID,
            request=interface.ILCDService.LOC_ID,
            sequence=sequence))

    def _handle_cls(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.cls()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ILCDService.SERVICE_ID,
            request=interface.ILCDService.CLS_ID,
            sequence=sequence))

    def _handle_row(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.row()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ILCDService.SERVICE_ID,
            request=interface.ILCDService.ROW_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_col(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.col()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ILCDService.SERVICE_ID,
            request=interface.ILCDService.COL_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_put(self, sequence, codec):
        # Read incoming parameters.
        c = codec.read_int32()

        # Invoke user implementation of remote function.
        self._handler.put(c)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.ILCDService.SERVICE_ID,
            request=interface.ILCDService.PUT_ID,
            sequence=sequence))


