# You can write copyrights rules here. These rules will be copied into the outputs.

#
# Generated by erpcgen 1.10.0 on Sat Apr 29 20:18:22 2023.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for LCDService
class LCDServiceClient(interface.ILCDService):
    def __init__(self, manager):
        super(LCDServiceClient, self).__init__()
        self._clientManager = manager

    def loc(self, column, row):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.LOC_ID,
                sequence=request.sequence))
        if column is None:
            raise ValueError("column is None")
        codec.write_int32(column)
        if row is None:
            raise ValueError("row is None")
        codec.write_int32(row)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def cls(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.CLS_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def row(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.ROW_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def col(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.COL_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def put(self, c):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.PUT_ID,
                sequence=request.sequence))
        if c is None:
            raise ValueError("c is None")
        codec.write_int32(c)

        # Send request and process reply.
        self._clientManager.perform_request(request)


