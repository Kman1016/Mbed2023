#
# Generated by erpcgen 1.10.0 on Sun May 28 20:10:52 2023.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for BBCarService
class BBCarServiceService(erpc.server.Service):
    def __init__(self, handler):
        super(BBCarServiceService, self).__init__(interface.IBBCarService.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IBBCarService.STOP_ID: self._handle_stop,
                interface.IBBCarService.GOSTRAIGHT_ID: self._handle_goStraight,
                interface.IBBCarService.TURN_ID: self._handle_turn,
                interface.IBBCarService.CTL_MODE_ID: self._handle_ctl_mode,
                interface.IBBCarService.REMOTECONTROLACTION_ID: self._handle_RemoteControlAction,
                interface.IBBCarService.REMOTETUNESPEED_ID: self._handle_RemoteTuneSpeed,
                interface.IBBCarService.REMOTESHOWSPEED_ID: self._handle_RemoteShowSpeed,
                interface.IBBCarService.REMOTESHOWPATTERN_ID: self._handle_RemoteShowPattern,
            }

    def _handle_stop(self, sequence, codec):
        # Read incoming parameters.
        cars = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.stop(cars)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.STOP_ID,
            sequence=sequence))

    def _handle_goStraight(self, sequence, codec):
        # Read incoming parameters.
        cars = codec.read_uint8()
        speed = codec.read_int32()

        # Invoke user implementation of remote function.
        self._handler.goStraight(cars, speed)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.GOSTRAIGHT_ID,
            sequence=sequence))

    def _handle_turn(self, sequence, codec):
        # Read incoming parameters.
        cars = codec.read_uint8()
        speed = codec.read_int32()
        factor = codec.read_double()

        # Invoke user implementation of remote function.
        self._handler.turn(cars, speed, factor)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.TURN_ID,
            sequence=sequence))

    def _handle_ctl_mode(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.ctl_mode()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.CTL_MODE_ID,
            sequence=sequence))

    def _handle_RemoteControlAction(self, sequence, codec):
        # Read incoming parameters.
        mode = codec.read_uint8()
        value = codec.read_int32()
        factor = codec.read_double()

        # Invoke user implementation of remote function.
        self._handler.RemoteControlAction(mode, value, factor)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.REMOTECONTROLACTION_ID,
            sequence=sequence))

    def _handle_RemoteTuneSpeed(self, sequence, codec):
        # Read incoming parameters.
        max = codec.read_double()
        min = codec.read_double()

        # Invoke user implementation of remote function.
        self._handler.RemoteTuneSpeed(max, min)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.REMOTETUNESPEED_ID,
            sequence=sequence))

    def _handle_RemoteShowSpeed(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.RemoteShowSpeed()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.REMOTESHOWSPEED_ID,
            sequence=sequence))

    def _handle_RemoteShowPattern(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.RemoteShowPattern()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBBCarService.SERVICE_ID,
            request=interface.IBBCarService.REMOTESHOWPATTERN_ID,
            sequence=sequence))


